# BotEmbeds.py

"""
Music Bot

    Helper file for embeds to reduce clutter in main file.

@author: Pierce Thompson
"""

import discord
import math


class BotEmbeds:
    def __init__(self, bot):
        self.bot = bot

    def generate_np_embed(self, ctx, song: tuple, bot, embed_theme):
        """
            Generates embed for "Now Playing" messages

            song: tuple (song_title, playback_url, webpage_url, author of request)
        """
        embed = discord.Embed(title="Now Playing", color=embed_theme)
        embed.set_thumbnail(url=bot.user.avatar_url)
        embed.set_image(url=song[5])
        embed.add_field(name="Song: ",
                        value=f"[{song[0]}]({song[2]})\n"
                              f"Duration - {math.floor(song[4] / 60)}:{str(math.floor(song[4] % 60)).rjust(2, '0')}",
                        inline=False)
        embed.set_footer(text=f"Requested by {song[3].name}", icon_url=song[3].avatar_url)
        return embed

    def generate_added_queue_embed(self, ctx, song, bot, embed_theme, queue_display_length):
        """
            Generates embed for "Added to Queue" messages

            song: tuple (song_title, playback_url, webpage_url, author of request)
        """
        embed = discord.Embed(title="Added to Queue", color=embed_theme)
        embed.set_thumbnail(url=bot.user.avatar_url)
        if type(song) == tuple:
            embed.add_field(name="Song: ", value=f"[{song[0]}]({song[2]})", inline=False)
            embed.set_footer(text=f"Requested by {song[3].name}", icon_url=song[3].avatar_url)
        else:
            overflow = False
            for count, i in enumerate(song):
                # Cap queued song display length
                if count == queue_display_length:
                    overflow = True
                    break
                # Embed link if song info is from youtube
                if type(i) == str:
                    embed.add_field(name=f"{count + 1}: ", value=f"{i}", inline=False)
                else:
                    embed.add_field(name=f"{count + 1}: ", value=f"[{i[0]}]({i[2]})", inline=False)
            if overflow:
                embed.set_footer(text=f"+{len(song) - queue_display_length} more")
            else:
                embed.set_footer(text=f"Requested by {song[0][3].name}", icon_url=song[0][3].avatar_url)
        return embed

    def generate_display_queue(self, ctx, queue, bot, embed_theme, queue_display_length):
        """
            Generates embed for "Queue" messages

            queue: Server song queue
        """
        embed = discord.Embed(title="Queue", color=embed_theme)
        embed.set_thumbnail(url=bot.user.avatar_url)
        # Build message to display
        overflow = False
        for count, song in enumerate(queue):
            # Cap queue display length
            if count == queue_display_length:
                overflow = True
                break
            # Embed link if song info is from youtube
            if type(song) == str:
                embed.add_field(name=f"{count + 1}: ", value=f"{song}", inline=False)
            else:
                embed.add_field(name=f"{count + 1}: ", value=f"[{song[0]}]({song[2]})", inline=False)
        # Display overflow message
        if overflow:
            embed.set_footer(text=f"+{len(queue) - queue_display_length} more")

        # return embed
        return embed

    def generate_invite(self, ctx, bot, embed_theme, invite_link):
        """
            Generate invite embed
        """
        embed = discord.Embed(title="Invite Link", url=invite_link, color=embed_theme)
        embed.set_thumbnail(url=bot.user.avatar_url)
        embed.set_author(name=bot.user.name, icon_url=bot.user.avatar_url)

        embed.add_field(name=f"Copyable link:", value=f"{invite_link}", inline=False)

        embed.set_footer(text=f"Generated by {ctx.message.author.name}", icon_url=ctx.message.author.avatar_url)

        return embed

    def generate_help(self, ctx, bot, embed_theme, get_prefix):
        """
            Generates help embed
        """
        embed = discord.Embed(title="Help", color=embed_theme)
        embed.set_thumbnail(url=bot.user.avatar_url)
        embed.set_author(name=bot.user.name, icon_url=bot.user.avatar_url)

        for i in bot.commands:
            if not i.name == 'help':
                embed.add_field(name=get_prefix(ctx, ctx) + i.name, value=i.help, inline=False)

        return embed

    def generate_new_server_embed(self, guild, bot, embed_theme):
        """
            Generate new server embed
        """
        embed = discord.Embed(title="Thanks for adding Tempo!", color=embed_theme)
        embed.set_thumbnail(url=bot.user.avatar_url)
        embed.set_author(name=bot.user.name, icon_url=bot.user.avatar_url)

        embed.add_field(name="Getting Started!",
                        value="Use '~help' to get started.\n"
                              "You can change the prefix from '~' by using '~prefix <new prefix>",
                        inline=False)

        embed.add_field(name="▬▬▬▬▬▬▬▬▬▬▬",
                        value='\u200b',
                        inline=False)

        embed.add_field(name="Bot is under constant development, Pardon the dust!",
                        value="Restarts are frequent, songs may cut out during a restart.",
                        inline=False)

        embed.set_image(url=bot.user.avatar_url)

        embed.set_footer(text=f"{bot.user.name} added to {guild.name}!", icon_url=guild.icon_url)

        return embed
